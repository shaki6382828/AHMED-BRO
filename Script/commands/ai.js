const axios = require("axios");

// üî¥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Gemini API Key ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá, ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á‡•§
const GEMINI_API_KEY = "AIzaSyABjIhqaAj5hxLmnPzeSuIPJ6fxVIKgIQ8"; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ Key ‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá

// ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶•‡ßç‡¶∞‡ßá‡¶° (‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü) ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
const conversationMemory = new Map();

module.exports.config = {
  name: "ai",
  version: "2.1.0", // More Resilient Version
  hasPermssion: 0,
  credits: "SHIFAT",
  description: "AI chat with auto-retry logic and a fallback model to handle server overload.",
  commandCategory: "AI",
  usages: "[prompt]",
  cooldowns: 3,
};

/**
 * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶Æ‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï
 * @param {string} model - ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
 * @param {Array} history - ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏
 * @param {string} threadID - ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø
 * @returns {Promise<string|null>} - ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá AI-‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá null
 */
async function fetchWithRetry(model, history, threadID) {
  const MAX_RETRIES = 3;
  let delay = 2000; // ‡ß® ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      console.log(`[AI] üß† ${threadID} - ‡¶Æ‡¶°‡ßá‡¶≤ '${model}' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ #${attempt}`);
      
      const contents = history.map(turn => ({
        role: turn.role === "user" ? "user" : "model",
        parts: [{ text: turn.content }]
      }));

      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${GEMINI_API_KEY}`,
        { contents },
        { headers: { "Content-Type": "application/json" }, timeout: 60000 }
      );

      const text = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
      if (text) {
        console.log(`[AI] ‚úÖ ${threadID} - ‡¶Æ‡¶°‡ßá‡¶≤ '${model}' ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§`);
        return text.trim();
      }
    } catch (error) {
      const isOverloaded = error.response && (error.response.status === 429 || error.response.status === 503);
      
      if (isOverloaded && attempt < MAX_RETRIES) {
        console.warn(`[AI] ‚ö†Ô∏è ${threadID} - ‡¶Æ‡¶°‡ßá‡¶≤ '${model}' ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≤‡ßã‡¶°‡•§ ${delay / 1000} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        delay *= 2; // ‡¶™‡¶∞‡ßá‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßç‡¶¨‡¶ø‡¶ó‡ßÅ‡¶£ ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá
      } else {
        const errorMessage = error.response ? error.response.data.error.message : error.message;
        console.error(`[AI] ‚ùå ${threadID} - ‡¶Æ‡¶°‡ßá‡¶≤ '${model}' ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá:`, errorMessage);
        return null; // ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶¨‡¶æ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá null ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
      }
    }
  }
  return null;
}

// ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
module.exports.run = async function ({ api, event, args }) {
  if (!GEMINI_API_KEY || GEMINI_API_KEY === "") {
    return api.sendMessage("‚ùå Gemini API Key ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø!\n\n‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ai.js ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ API Key ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
  }

  try {
    const question = args.join(" ").trim();
    if (!question) {
      return api.sendMessage(" ‚ô°  ‚à©_‚à©                         ‚à©_‚à©  ‚ô°\nÔºà‚Äû‚Ä¢ ÷ä ‚Ä¢‚Äû)ùêçùêÑùêéùêó‚ö°(‚Äû‚Ä¢ ÷ä ‚Ä¢‚Äû) \n‚ü°‚îÄ‚à™‚à™‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚à™‚à™‚îÄ‚îÄ‚îÄ‚ü°\n‚îÇ‚îÄùô∑ùôæùöÜ ùô≤ùô∞ùôΩ ùô∏ ùô∑ùô¥ùôªùôø ùöÑ ùöÇùô∏ùöÅ‚îÄ‚îÇ \n‚ü°‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°\n‚îÇ(¬¨‚ó°¬¨)‚úß    (¬¨‚ó°¬¨)‚úß    (¬¨‚ó°¬¨)‚úß‚îÇ \n‚ü°‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°", event.threadID, event.messageID);
    }
    
    api.sendTypingIndicator(event.threadID, true);
    const loadingMessage = await new Promise(resolve => {
      api.sendMessage(" ‚ü°‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°\njust a second......\n‚ü°‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°", event.threadID, (err, info) => resolve(info || null));
    });

    if (!conversationMemory.has(event.threadID)) {
      conversationMemory.set(event.threadID, []);
    }
    const history = conversationMemory.get(event.threadID);
    
    const MAX_HISTORY_LENGTH = 10;
    while (history.length > MAX_HISTORY_LENGTH) {
      history.shift();
    }

    history.push({ role: "user", content: question });

    // ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá 'gemini-1.5-flash-latest' ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    let reply = await fetchWithRetry('gemini-1.5-flash-latest', history, event.threadID);

    // ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü, ‡¶§‡¶¨‡ßá 'gemini-pro' ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    if (!reply) {
      console.log(`[AI] üîÑ ${event.threadID} - ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶Æ‡¶°‡ßá‡¶≤ 'gemini-pro' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...`);
      reply = await fetchWithRetry('gemini-pro', history, event.threadID);
    }

    api.sendTypingIndicator(event.threadID, false);
    if (loadingMessage) api.unsendMessage(loadingMessage.messageID);

    if (!reply) {
      return api.sendMessage("ü´°‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§ ‡¶•‡¶æ‡¶ï‡¶æ‡ßü ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
    }
    
    history.push({ role: "assistant", content: reply });
    api.sendMessage(reply, event.threadID, event.messageID);

  } catch (error) {
    console.error("[AI] Fatal Error:", error);
    api.sendTypingIndicator(event.threadID, false);
    api.sendMessage("‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ï‡¶®‡¶∏‡ßã‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
  }
};
